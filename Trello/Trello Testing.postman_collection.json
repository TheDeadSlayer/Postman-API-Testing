{
	"info": {
		"_postman_id": "705f948a-6262-4dd4-bdb5-4e57b629b421",
		"name": "Trello Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22501391"
	},
	"item": [
		{
			"name": "Create a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test Case: Verify the values of the most important parameters\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify important parameters\", function()\r",
							"{\r",
							"    pm.expect(jsonData.closed).to.equal(false)\r",
							"    pm.expect(jsonData.prefs.permissionLevel).to.equal(\"private\")\r",
							"    pm.expect(jsonData.prefs.canBePublic).to.equal(true)\r",
							"    pm.expect(jsonData.prefs.canInvite).to.equal(true)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/1/boards/?name={{boardName}}&key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{boardName}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Member info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test Case: Verify number of boards is above 1\r",
							"var boardsData = pm.response.json().boards\r",
							"var boardNum= boardsData.length\r",
							"pm.test(\"Verify number of boards is above 1\", function()\r",
							"{\r",
							"    pm.expect(boardNum).to.be.above(1);\r",
							"});\r",
							"\r",
							"//Set board Environment Variables\r",
							"var firstID = pm.response.json().boards[0].id\r",
							"var secondID = pm.response.json().boards[boardNum-1].id\r",
							"var testID = null\r",
							"\r",
							"pm.environment.set(\"FirstBoardID\", firstID );\r",
							"pm.environment.set(\"LastBoardID\", secondID);\r",
							"\r",
							"for (let i=0 ; i<boardNum;i++)\r",
							"{\r",
							"    if (boardsData[i].name == \"Testing Board\")\r",
							"    {\r",
							"        testID=boardsData[i].id\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.environment.set(\"createdBoardID\", testID);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/1/members/me?boards=open&key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"1",
						"members",
						"me"
					],
					"query": [
						{
							"key": "boards",
							"value": "open"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test Case: Response is 200 OK\r",
							"pm.test(\"Respone is 200 OK\",function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(200)\r",
							"    pm.expect(pm.response.status).to.equal(\"OK\")\r",
							"});\r",
							"\r",
							"// Test Case: Verify Existence of Deletion Message\r",
							"pm.test(\"Verify Deletion Message\", function()\r",
							"{\r",
							"    pm.expect(pm.response.text()).to.include.oneOf([\"board is removed successfully\",\"board is deleted successfully\"])\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/1/boards/{{createdBoardID}}?key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{createdBoardID}}"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test Case : Verify Existence of important keys\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Verify Existence of important keys\", function()\r",
							"{  \r",
							"    pm.expect(jsonData).to.have.property('id')\r",
							"    pm.expect(jsonData).to.have.property('name')\r",
							"    pm.expect(jsonData).to.have.property('idBoard')\r",
							"});\r",
							"\r",
							"// Test Case : Verify default values of important parameters\r",
							"pm.test(\"Verify default values of important parameters\", function()\r",
							"{\r",
							"    pm.expect(jsonData.closed).to.equal(false)\r",
							"    pm.expect(jsonData.limits).to.be.empty\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/1/lists?name={{listName}}&idBoard={{createdBoardID}}&key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"1",
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "{{listName}}"
						},
						{
							"key": "idBoard",
							"value": "{{createdBoardID}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Lists on a Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test Case: Verify number of lists is 3\r",
							"var listsData = pm.response.json()\r",
							"var listNum= listsData.length\r",
							"\r",
							"pm.test(\"Verify number of lists is 3\", function()\r",
							"{\r",
							"    pm.expect(listNum).to.equal(3);\r",
							"});\r",
							"\r",
							"//Set list Environment Variables\r",
							"var firstID = pm.response.json()[0].id\r",
							"var secondID = pm.response.json()[listNum-1].id\r",
							"\r",
							"pm.environment.set(\"FirstListID\", firstID );\r",
							"pm.environment.set(\"LastListID\", secondID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseURL}}/1/boards/{{createdBoardID}}/lists?key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{createdBoardID}}",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive or un-archive a list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test Case: Response is 200 OK\r",
							"pm.test(\"Respone is 200 OK\",function()\r",
							"{\r",
							"    pm.expect(pm.response.code).to.equal(200)\r",
							"    pm.expect(pm.response.status).to.equal(\"OK\")\r",
							"});\r",
							"\r",
							"// Test Case: Verify closed is equal the archive value\r",
							"var jsonData = pm.response.json()\r",
							"pm.test(\"Verify closed equals archive value\",function()\r",
							"{\r",
							"    pm.expect(jsonData.closed.toString()).to.equal(pm.environment.get(\"archiveValue\"))\r",
							"});\r",
							"\r",
							"// Test Case: Verify Set-Cookie header contains specific text\r",
							"pm.test(\"Verify Set-Cookie header contains correct text\",function()\r",
							"{\r",
							"    pm.expect(pm.response.headers.get(\"Set-Cookie\")).to.include(\"isEnterpriseAdmin%3Dfalse\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{BaseURL}}/1/lists/{{FirstListID}}/?value={{archiveValue}}&key={{apiKey}}&token={{apiToken}}",
					"host": [
						"{{BaseURL}}"
					],
					"path": [
						"1",
						"lists",
						"{{FirstListID}}",
						""
					],
					"query": [
						{
							"key": "value",
							"value": "{{archiveValue}}"
						},
						{
							"key": "key",
							"value": "{{apiKey}}"
						},
						{
							"key": "token",
							"value": "{{apiToken}}"
						}
					]
				}
			},
			"response": []
		}
	]
}